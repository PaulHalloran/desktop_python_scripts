'''
NOTE this is presently set up to output only surface level fields because of memory problems - see sectoin '#test how many levels and if 3D just take top level' to edit that condition
'''

import time
import numpy as np
import glob
import iris
import iris.coord_categorisation
import iris.analysis
import subprocess
import os

#print 'waiting'
#time.sleep(60.0*60.0*12.0)
#print 'resuming'

def model_names(directory):
	files = glob.glob(directory+'/*.nc')
	models_tmp = []
	for file in files:
		statinfo = os.stat(file)
		if statinfo.st_size >= 1:
			models_tmp.append(file.split('/')[-1].split('_')[2])
			models = np.unique(models_tmp)
	return models

subprocess.call('rm /home/ph290/data0/tmp/temp2.nc', shell=True)
subprocess.call('rm /home/ph290/data0/tmp/temp.nc', shell=True)

directory_tmp = '/home/ph290/Downloads/mri/'
directory_tmp2 = '/home/ph290/Downloads/mri/regrid/'

#runs = ['piControl']
runs = ['rcp85']
variables = np.array(['thetao','intpp','fgco2','no3','dissic'])
time_period = ['Omon','Oyr']

directories =[directory_tmp]
#,directory_tmp+runs[1]+'/'+variables[0],directory_tmp+runs[1]+'/'+variables[1]]

print directories[0]
models = model_names(directories[0])


for model in models:
	print model
	for run in runs:
		print run
		dir1 = directory_tmp
		dir2 = directory_tmp2+'/regridded/'
		files = glob.glob(dir1+'*'+model+'*.nc')
		for i,var in enumerate(variables):
			subprocess.call('rm /home/ph290/data0/tmp/temp.nc', shell=True)
			tmp = glob.glob(dir2+model+'_'+variables[i]+'_'+run+'_regridded.nc')
			if np.size(tmp) == 0:
				files = glob.glob(dir1+'/*'+time_period[i]+'*_'+model+'_*r1i1p1*.nc')
				sizing = np.size(files)
				if sizing > 1:
					files = ' '.join(files)
					print 'merging files'
					#merge together different files from the same run
					subprocess.call(['cdo mergetime '+files+' /home/ph290/data0/tmp/temp.nc'], shell=True)
				if sizing == 1:
					print 'no need to merge - only one file present'
					subprocess.call(['cp '+files[0]+' /home/ph290/data0/tmp/temp.nc'], shell=True)
				print 'regridding files horizontally'
				#regrid data onto a 360x180 grid
				subprocess.call(['cdo remapbil,r360x180 -selname,'+var+' /home/ph290/data0/tmp/temp.nc /home/ph290/data0/tmp/temp3.nc'], shell=True)
				#print 'regridding files vertically'
                                #subprocess.call('rm /home/ph290/data0/tmp/temp.nc', shell=True)
				#regrid data onto a 360x180 grid
				#subprocess.call(['cdo intlevel,6000,5000,4000,3000,2000,1500,1000,500,400,300,200,100,80,60,40,20,10,0 /home/ph290/data0/tmp/temp2.nc /home/ph290/data0/tmp/temp3.nc'], shell=True)
                                #subprocess.call('rm /home/ph290/data0/tmp/temp2.nc', shell=True)
				print 'time-meaning data (to annual means if required)'			
				#read data into iris and anually mean data
				try:
					cube = iris.load_cube('/home/ph290/data0/tmp/temp3.nc')
					#take just the years less before 2099
					iris.coord_categorisation.add_year(cube, 'time', name='year2')
                                        loc = np.where(cube.coord('year2').points <= 2099)
                                        loc2 = cube.coord('time').points[loc[0][-1]]
                                        cube = cube.extract(iris.Constraint(time = lambda time_tmp: time_tmp <= loc2))
                                        #convert monthly means to annual means
					cube_ann_meaned = cube.aggregated_by('year2', iris.analysis.MEAN)
					print 'writing final file'
					iris.fileformats.netcdf.save(cube_ann_meaned, dir2+model+'_'+variables[i]+'_'+run+'_regridded.nc','NETCDF3_CLASSIC')
                                        subprocess.call('rm /home/ph290/data0/tmp/temp3.nc', shell=True)
				except:
					print model+' failed'


